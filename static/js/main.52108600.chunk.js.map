{"version":3,"sources":["App.js","index.js"],"names":["App","viewer","useRef","_useState","useState","_useState2","Object","slicedToArray","setWvInstance","_useState3","_useState4","setSnapMode","useEffect","WebViewer","path","initialDoc","fullAPI","enableMeasurement","current","then","instance","docViewer","Tools","setToolbarGroup","enableFeatures","Feature","SnapMode","POINT_ON_LINE","getSnapMode","setToolMode","ToolNames","PERIMETER_MEASUREMENT","openElements","react_default","a","createElement","className","ref","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"6MAoDeA,SAhDH,WACV,IAAMC,EAASC,iBAAO,MADNC,EAEoBC,mBAAS,MAF7BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAEGK,GAFHH,EAAA,GAAAA,EAAA,IAAAI,EAGgBL,mBAAS,MAHzBM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAGCE,GAHDD,EAAA,GAAAA,EAAA,IAwChB,OA1BAE,oBAAU,WACRC,IACE,CACEC,KAAM,iBACNC,WAAY,uBACZC,SAAS,EACTC,mBAAmB,GAErBhB,EAAOiB,SACPC,KAAK,SAACC,GACNZ,EAAcY,GADK,IAEXC,EAAqBD,EAArBC,UAAWC,EAAUF,EAAVE,MAGnBF,EAASG,gBAAgB,wBACzBH,EAASI,eAAeJ,EAASK,QAAQC,UAGzCN,EAAST,YAAYU,EAAUK,SAASC,eAExChB,EAAYS,EAASQ,eACrBR,EAASS,YAAYP,EAAMQ,UAAUC,uBACrCX,EAASY,aAAa,CAAC,sBAExB,IAGDC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,gBACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYC,IAAKpC,OC1CtCqC,IAASC,OAAON,EAAAC,EAAAC,cAACK,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.52108600.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport WebViewer from '@pdftron/webviewer';\nimport './App.css';\n\nconst App = () => {\n  const viewer = useRef(null);\n  const [wvInstance, setWvInstance] = useState(null);\n  const [snapMode, setSnapMode] = useState(null);\n\n  const snapModeMap = {\n    14: 'DEFAULT',\n    1: 'POINT_ON_LINE',\n    2: 'LINE_MID_POINT',\n    4: 'LINE_INTERSECTION',\n    8: 'PATH_ENDPOINT',\n  };\n\n  // if using a class, equivalent of componentDidMount \n  useEffect(() => {\n    WebViewer(\n      {\n        path: '/webviewer/lib',\n        initialDoc: '/files/floorplan.pdf',\n        fullAPI: true,\n        enableMeasurement: true,\n      },\n      viewer.current,\n    ).then((instance) => {\n      setWvInstance(instance);\n      const { docViewer, Tools } = instance;\n      // This toggles the internal state variable, ensuring that the checkbox will\n      // also be checked at the time it is rendered\n      instance.setToolbarGroup('toolbarGroup-Measure');\n      instance.enableFeatures(instance.Feature.SnapMode);\n      // This allows you to change the SnapMode to something other than\n      // docViewer.SnapMode.DEFAULT\n      instance.setSnapMode(docViewer.SnapMode.POINT_ON_LINE);\n      // I've also implemented a getter\n      setSnapMode(instance.getSnapMode());\n      instance.setToolMode(Tools.ToolNames.PERIMETER_MEASUREMENT);\n      instance.openElements(['toolStylePopup']);\n    });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"header\">React sample</div>\n      <div className=\"webviewer\" ref={viewer}></div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}